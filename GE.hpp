#ifndef _GE_H
#define _GE_H

enum GECommand {
	GE_NOP = 0,
	GE_VADDR = 0x1,
	GE_IADDR = 0x2,
	GE_PRIM = 0x4,
	GE_BEZIER = 0x5,
	GE_SPLINE = 0x6,
	GE_BOUNDINGBOX = 0x7,
	GE_JUMP = 0x8,
	GE_BJUMP = 0x9,
	GE_CALL = 0xA,
	GE_RET = 0xB,
	GE_END = 0xC,
	GE_SIGNAL = 0xE,
	GE_FINISH = 0xF,
	GE_BASE = 0x10,
	GE_VERTEXTYPE = 0x12,
	GE_OFFSETADDR = 0x13,
	GE_ORIGIN = 0x14,
	GE_REGION1 = 0x15,
	GE_REGION2 = 0x16,
	GE_LIGHTINGENABLE = 0x17,
	GE_LIGHTENABLE0 = 0x18,
	GE_LIGHTENABLE1 = 0x19,
	GE_LIGHTENABLE2 = 0x1A,
	GE_LIGHTENABLE3 = 0x1B,
	GE_DEPTHCLAMPENABLE = 0x1C,
	GE_CULLFACEENABLE = 0x1D,
	GE_TEXTUREMAPENABLE = 0x1E,
	GE_FOGENABLE = 0x1F,
	GE_DITHERENABLE = 0x20,
	GE_ALPHABLENDENABLE = 0x21,
	GE_ALPHATESTENABLE = 0x22,
	GE_ZTESTENABLE = 0x23,
	GE_STENCILTESTENABLE = 0x24,
	GE_ANTIALIASENABLE = 0x25,
	GE_PATCHCULLENABLE = 0x26,
	GE_COLORTESTENABLE = 0x27,
	GE_LOGICOPENABLE = 0x28,
	GE_BONEMATRIXNUMBER = 0x2A,
	GE_BONEMATRIXDATA = 0x2B,
	GE_MORPHWEIGHT0 = 0x2C,
	GE_MORPHWEIGHT1 = 0x2D,
	GE_MORPHWEIGHT2 = 0x2E,
	GE_MORPHWEIGHT3 = 0x2F,
	GE_MORPHWEIGHT4 = 0x30,
	GE_MORPHWEIGHT5 = 0x31,
	GE_MORPHWEIGHT6 = 0x32,
	GE_MORPHWEIGHT7 = 0x33,
	GE_PATCHDIVISION = 0x36,
	GE_PATCHPRIMITIVE = 0x37,
	GE_PATCHFACING = 0x38,
	GE_WORLDMATRIXNUMBER = 0x3A,
	GE_WORLDMATRIXDATA = 0x3B,
	GE_VIEWMATRIXNUMBER = 0x3C,
	GE_VIEWMATRIXDATA = 0x3D,
	GE_PROJMATRIXNUMBER = 0x3E,
	GE_PROJMATRIXDATA = 0x3F,
	GE_TGENMATRIXNUMBER = 0x40,
	GE_TGENMATRIXDATA = 0x41,
	GE_VIEWPORTXSCALE = 0x42,
	GE_VIEWPORTYSCALE = 0x43,
	GE_VIEWPORTZSCALE = 0x44,
	GE_VIEWPORTXCENTER = 0x45,
	GE_VIEWPORTYCENTER = 0x46,
	GE_VIEWPORTZCENTER = 0x47,
	GE_TEXSCALEU = 0x48,
	GE_TEXSCALEV = 0x49,
	GE_TEXOFFSETU = 0x4A,
	GE_TEXOFFSETV = 0x4B,
	GE_OFFSETX = 0x4C,
	GE_OFFSETY = 0x4D,
	GE_SHADEMODE = 0x50,  // flat or gouraud
	GE_REVERSENORMAL = 0x51,
	GE_MATERIALUPDATE = 0x53,
	GE_MATERIALEMISSIVE = 0x54, //not sure about these but this makes sense
	GE_MATERIALAMBIENT = 0x55,  //gotta try enabling lighting and check :)
	GE_MATERIALDIFFUSE = 0x56,
	GE_MATERIALSPECULAR = 0x57,
	GE_MATERIALALPHA = 0x58,
	GE_MATERIALSPECULARCOEF = 0x5B,
	GE_AMBIENTCOLOR = 0x5C,
	GE_AMBIENTALPHA = 0x5D,
	GE_LIGHTMODE = 0x5E,
	GE_LIGHTTYPE0 = 0x5F,
	GE_LIGHTTYPE1 = 0x60,
	GE_LIGHTTYPE2 = 0x61,
	GE_LIGHTTYPE3 = 0x62,
	GE_LX0 = 0x63,
	GE_LY0,
	GE_LZ0,
	GE_LX1,
	GE_LY1,
	GE_LZ1,
	GE_LX2,
	GE_LY2,
	GE_LZ2,
	GE_LX3,
	GE_LY3,
	GE_LZ3,
	GE_LDX0 = 0x6F,
	GE_LDY0,
	GE_LDZ0,
	GE_LDX1,
	GE_LDY1,
	GE_LDZ1,
	GE_LDX2,
	GE_LDY2,
	GE_LDZ2,
	GE_LDX3,
	GE_LDY3,
	GE_LDZ3,
	GE_LKA0 = 0x7B,
	GE_LKB0,
	GE_LKC0,
	GE_LKA1,
	GE_LKB1,
	GE_LKC1,
	GE_LKA2,
	GE_LKB2,
	GE_LKC2,
	GE_LKA3,
	GE_LKB3,
	GE_LKC3,
	GE_LKS0 = 0x87,
	GE_LKS1,
	GE_LKS2,
	GE_LKS3,
	GE_LKO0 = 0x8b,
	GE_LKO1,
	GE_LKO2,
	GE_LKO3,
	GE_LAC0 = 0x8F,
	GE_LDC0,
	GE_LSC0,
	GE_LAC1,
	GE_LDC1,
	GE_LSC1,
	GE_LAC2,
	GE_LDC2,
	GE_LSC2,
	GE_LAC3,
	GE_LDC3,
	GE_LSC3,
	GE_CULL = 0x9B,
	GE_FRAMEBUFPTR = 0x9C,
	GE_FRAMEBUFWIDTH = 0x9D,
	GE_ZBUFPTR = 0x9E,
	GE_ZBUFWIDTH = 0x9F,
	GE_TEXADDR0 = 0xA0,
	GE_TEXADDR1,
	GE_TEXADDR2,
	GE_TEXADDR3,
	GE_TEXADDR4,
	GE_TEXADDR5,
	GE_TEXADDR6,
	GE_TEXADDR7,
	GE_TEXBUFWIDTH0 = 0xA8,
	GE_TEXBUFWIDTH1,
	GE_TEXBUFWIDTH2,
	GE_TEXBUFWIDTH3,
	GE_TEXBUFWIDTH4,
	GE_TEXBUFWIDTH5,
	GE_TEXBUFWIDTH6,
	GE_TEXBUFWIDTH7,
	GE_CLUTADDR = 0xB0,
	GE_CLUTADDRUPPER = 0xB1,
	GE_TRANSFERSRC,
	GE_TRANSFERSRCW,
	GE_TRANSFERDST,
	GE_TRANSFERDSTW,
	GE_TEXSIZE0 = 0xB8,
	GE_TEXSIZE1,
	GE_TEXSIZE2,
	GE_TEXSIZE3,
	GE_TEXSIZE4,
	GE_TEXSIZE5,
	GE_TEXSIZE6,
	GE_TEXSIZE7,
	GE_TEXMAPMODE = 0xC0,
	GE_TEXSHADELS = 0xC1,
	GE_TEXMODE = 0xC2,
	GE_TEXFORMAT = 0xC3,
	GE_LOADCLUT = 0xC4,
	GE_CLUTFORMAT = 0xC5,
	GE_TEXFILTER = 0xC6,
	GE_TEXWRAP = 0xC7,
	GE_TEXLEVEL = 0xC8,
	GE_TEXFUNC = 0xC9,
	GE_TEXENVCOLOR = 0xCA,
	GE_TEXFLUSH = 0xCB,
	GE_TEXSYNC = 0xCC,
	GE_FOG1 = 0xCD,
	GE_FOG2 = 0xCE,
	GE_FOGCOLOR = 0xCF,
	GE_TEXLODSLOPE = 0xD0,
	GE_FRAMEBUFPIXFORMAT = 0xD2,
	GE_CLEARMODE = 0xD3,
	GE_SCISSOR1 = 0xD4,
	GE_SCISSOR2 = 0xD5,
	GE_MINZ = 0xD6,
	GE_MAXZ = 0xD7,
	GE_COLORTEST = 0xD8,
	GE_COLORREF = 0xD9,
	GE_COLORTESTMASK = 0xDA,
	GE_ALPHATEST = 0xDB,
	GE_STENCILTEST = 0xDC,
	GE_STENCILOP = 0xDD,
	GE_ZTEST = 0xDE,
	GE_BLENDMODE = 0xDF,
	GE_BLENDFIXEDA = 0xE0,
	GE_BLENDFIXEDB = 0xE1,
	GE_DITH0 = 0xE2,
	GE_DITH1,
	GE_DITH2,
	GE_DITH3,
	GE_LOGICOP = 0xE6,
	GE_ZWRITEDISABLE = 0xE7,
	GE_MASKRGB = 0xE8,
	GE_MASKALPHA = 0xE9,
	GE_TRANSFERSTART = 0xEA,
	GE_TRANSFERSRCPOS = 0xEB,
	GE_TRANSFERDSTPOS = 0xEC,
	GE_TRANSFERSIZE = 0xEE,
	GE_VSCX = 0xF0,
	GE_VSCY = 0xF1,
	GE_VSCZ = 0xF2,
	GE_VTCS = 0xF3,
	GE_VTCT = 0xF4,
	GE_VTCQ = 0xF5,
	GE_VCV = 0xF6,
	GE_VAP = 0xF7,
	GE_VFC = 0xF8,
	GE_VSCV = 0xF9,
	GE_UNKNOWN_03 = 0x03,
	GE_UNKNOWN_0D = 0x0D,
	GE_UNKNOWN_11 = 0x11,
	GE_UNKNOWN_29 = 0x29,
	GE_UNKNOWN_34 = 0x34,
	GE_UNKNOWN_35 = 0x35,
	GE_UNKNOWN_39 = 0x39,
	GE_UNKNOWN_4E = 0x4E,
	GE_UNKNOWN_4F = 0x4F,
	GE_UNKNOWN_52 = 0x52,
	GE_UNKNOWN_59 = 0x59,
	GE_UNKNOWN_5A = 0x5A,
	GE_UNKNOWN_B6 = 0xB6,
	GE_UNKNOWN_B7 = 0xB7,
	GE_UNKNOWN_D1 = 0xD1,
	GE_UNKNOWN_ED = 0xED,
	GE_UNKNOWN_EF = 0xEF,
	GE_UNKNOWN_FA = 0xFA,
	GE_UNKNOWN_FB = 0xFB,
	GE_UNKNOWN_FC = 0xFC,
	GE_UNKNOWN_FD = 0xFD,
	GE_UNKNOWN_FE = 0xFE,
	GE_NOP_FF = 0xFF,
};

struct GPUStateCache
{
	
	uint32_t featureFlags;

	uint32_t vertexAddr;
	uint32_t indexAddr;
	uint32_t offsetAddr;

	


	//uint64_t dirty;

	//bool textureFullAlpha;
	//bool vertexFullAlpha;

	//int skipDrawReason;

	//UVScale uv;

	//bool bgraTexture;
	//bool needShaderTexClamp;
	//bool allowFramebufferRead;

	//float morphWeights[8];
	//u32 deferredVertTypeDirty;

	//u32 curTextureWidth;
	//u32 curTextureHeight;
	//u32 actualTextureHeight;
	//// Only applied when needShaderTexClamp = true.
	//u32 curTextureXOffset;
	//u32 curTextureYOffset;

	//float vpWidth;
	//float vpHeight;

	//float vpXOffset;
	//float vpYOffset;
	//float vpZOffset;
	//float vpWidthScale;
	//float vpHeightScale;
	//float vpDepthScale;

	//KnownVertexBounds vertBounds;

	//// TODO: These should be accessed from the current VFB object directly.
	//u32 curRTWidth;
	//u32 curRTHeight;
	//u32 curRTRenderWidth;
	//u32 curRTRenderHeight;

	//void SetCurRTOffsetX(int off) {
	//	if (off != curRTOffsetX) {
	//		curRTOffsetX = off;
	//		Dirty(DIRTY_VIEWPORTSCISSOR_STATE);
	//	}
	//}
	//u32 curRTOffsetX;

	//// Set if we are doing hardware bezier/spline.
	//SubmitType submitType;
	//int spline_num_points_u;

	//bool useShaderDepal;
	//GEBufferFormat depalFramebufferFormat;

	//u32 getRelativeAddress(u32 data) const;
	//void Reset();
	//void DoState(PointerWrap& p);
};

#endif //_GE_H